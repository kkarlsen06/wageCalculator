<!DOCTYPE html>
<html lang="no">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
  <title>Velkommen - Lønnsberegner</title>
  <!-- Google Fonts - Inter for modern, professional typography -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="css/themes.css?v=1">
  <link rel="stylesheet" href="css/style.css?v=12">
  <link rel="stylesheet" href="css/onboarding.css?v=1">
  <link rel="icon" href="../src/assets/favicon.ico" type="image/x-icon">
  <link rel="shortcut icon" href="../src/assets/favicon.ico" type="image/x-icon">
  <script type="module" src="/kalkulator/js/bootstrap-supa.js"></script>
  <meta name="theme-color" content="#000000">
  <meta name="theme-color" media="(prefers-color-scheme: light)" content="#000000">
  <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#000000">
</head>
<body>
  <div class="onboarding-container">
    <!-- Progress bar -->
    <div class="onboarding-progress">
      <div class="onboarding-progress-fill" id="progressFill"></div>
    </div>

    <!-- Step 1: Welcome -->
    <div class="onboarding-step active" id="step1">
      <div class="step-header">
        <div class="welcome-icon">
          <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
          </svg>
        </div>
        <h1 class="step-title">Velkommen!</h1>
        <p class="step-subtitle">La oss sette opp din personlige lønnskalkulator. Det tar bare noen få minutter.</p>
      </div>

      <div class="form-group">
        <label class="form-label">Fornavn</label>
        <input type="text" class="form-control" id="firstName" placeholder="F.eks. Ola" maxlength="50" required>
        <div class="form-error" id="firstNameError">Vennligst fyll inn fornavnet ditt</div>
        <div class="form-hint">Dette vises i velkomstmeldinger og rapporter</div>
      </div>

      <div class="form-group">
        <label class="form-label">Profilbilde (valgfritt)</label>
        <div class="profile-upload">
          <div class="profile-preview" id="profilePreview">
            <div class="profile-placeholder" id="profilePlaceholder">
              <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            </div>
          </div>
          <input type="file" id="profilePicture" accept="image/*">
          <button type="button" class="btn btn-secondary" id="uploadProfileButton">
            Velg bilde
          </button>
        </div>
      </div>
    </div>

    <!-- Step 2: Wage Type -->
    <div class="onboarding-step" id="step2">
      <div class="step-header">
        <h1 class="step-title">Lønnstype</h1>
        <p class="step-subtitle">Velg hvordan lønnen din beregnes</p>
      </div>

      <div class="wage-type-options">
        <div class="wage-option" data-value="virke">
          <div class="wage-option-title">Virke-tariff</div>
          <div class="wage-option-subtitle">Lønnstrinn basert på tariffavtalen</div>
        </div>
        <div class="wage-option" data-value="custom">
          <div class="wage-option-title">Egen lønn</div>
          <div class="wage-option-subtitle">Egendefinert timelønn</div>
        </div>
      </div>

      <!-- Virke wage level selector -->
      <div class="form-group hidden" id="virkeWageSection">
        <label class="form-label">Lønnstrinn (Virke 2025)</label>
        <select class="form-control" id="wageSelect">
          <option value="-1">Unge arbeidstakere under 16 år (129,91 kr/t)</option>
          <option value="-2">Unge arbeidstakere under 18 år (132,90 kr/t)</option>
          <option value="1" selected>Trinn 1 (184,54 kr/t)</option>
          <option value="2">Trinn 2 (185,38 kr/t)</option>
          <option value="3">Trinn 3 (187,46 kr/t)</option>
          <option value="4">Trinn 4 (193,05 kr/t)</option>
          <option value="5">Trinn 5 (210,81 kr/t)</option>
          <option value="6">Trinn 6 (256,14 kr/t)</option>
        </select>
      </div>

      <!-- Custom wage section -->
      <div class="form-group hidden" id="customWageSection">
        <label class="form-label">Timelønn (kr)</label>
        <input type="number" class="form-control" id="customWageInput" placeholder="200.00" step="0.01" min="50" max="1000" required>
        <div class="form-error" id="customWageError">Vennligst fyll inn en gyldig timelønn (50-1000 kr)</div>
        <div class="form-hint">Grunnlønn per time før tillegg</div>

        <!-- Supplements editor -->
        <div class="advanced-section" id="supplementsSection">
          <div class="form-group">
            <label class="form-label">Ukedag-tillegg (mandag-fredag)</label>
            <div class="form-hint">Ekstra betaling for kveldsvakter og lignende</div>
            <div class="bonus-slots" id="weekdayBonusSlots"></div>
            <button type="button" class="btn-add-bonus" id="addWeekdayBonus">+ Legg til kveldstillegg</button>
          </div>

          <div class="form-group">
            <label class="form-label">Lørdag-tillegg</label>
            <div class="form-hint">Helgetillegg for lørdager</div>
            <div class="bonus-slots" id="saturdayBonusSlots"></div>
            <button type="button" class="btn-add-bonus" id="addSaturdayBonus">+ Legg til lørdagstillegg</button>
          </div>

          <div class="form-group">
            <label class="form-label">Søndag/helligdag-tillegg</label>
            <div class="form-hint">Høyeste tillegg for søndager og helligdager</div>
            <div class="bonus-slots" id="sundayBonusSlots"></div>
            <button type="button" class="btn-add-bonus" id="addSundayBonus">+ Legg til søndagstillegg</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Step 3: Breaks -->
    <div class="onboarding-step" id="step3">
      <div class="step-header">
        <h1 class="step-title">Pauseinnstillinger</h1>
        <p class="step-subtitle">Hvordan skal pausetid håndteres i lønnsberegningen?</p>
      </div>

      <div class="switch-group">
        <div>
          <div class="switch-title">Betalt pause</div>
          <div class="switch-subtitle">Alle timer betales, inkludert pausetid</div>
        </div>
        <label class="switch">
          <input type="checkbox" id="paidBreakToggle">
          <span class="slider"></span>
        </label>
      </div>

      <div class="advanced-section" id="breakAdvancedSection">
        <div class="advanced-toggle" id="advancedBreaksToggle">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
          Avanserte innstillinger
        </div>
        
        <div class="hidden" id="breakAdvancedContent">
          <div class="form-group">
            <label class="form-label">Pausetrekk-terskel (timer)</label>
            <input type="number" class="form-control" id="pauseThreshold" value="5.5" step="0.5" min="0" max="24">
            <div class="form-hint">Minimum vaktlengde for å utløse pausetrekk</div>
          </div>

          <div class="form-group">
            <label class="form-label">Pausetrekk (minutter)</label>
            <input type="number" class="form-control" id="pauseDuration" value="30" step="15" min="0" max="120">
            <div class="form-hint">Antall minutter som trekkes fra</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Step 4: Monthly Goal -->
    <div class="onboarding-step" id="step4">
      <div class="step-header">
        <h1 class="step-title">Månedlig mål</h1>
        <p class="step-subtitle">Sett et inntektsmål for å følge fremdriften din</p>
      </div>

      <div class="form-group">
        <label class="form-label">Månedlig inntektsmål (NOK)</label>
        <input type="number" class="form-control" id="monthlyGoal" placeholder="20 000" step="1000" min="1000" max="200000">
        <div class="form-hint">Brukes til fremdriftslinjen i dashbordet og måloppfølging (valgfritt)</div>
      </div>
    </div>

    <!-- Step 5: Taxes & Payday -->
    <div class="onboarding-step" id="step5">
      <div class="step-header">
        <h1 class="step-title">Skatt og lønningsdag</h1>
        <p class="step-subtitle">Konfigurer skattetrekk og når du får utbetalt lønn</p>
      </div>

      <div class="switch-group">
        <div>
          <div class="switch-title">Trekk skatt</div>
          <div class="switch-subtitle">Viser netto lønn etter skattetrekk</div>
        </div>
        <label class="switch">
          <input type="checkbox" id="taxDeductionToggle">
          <span class="slider"></span>
        </label>
      </div>

      <div class="form-group hidden" id="taxPercentageSection">
        <label class="form-label">Skatteprosent (%)</label>
        <input type="number" class="form-control" id="taxPercentage" placeholder="25.0" step="0.5" min="0" max="50" value="25.0">
        <div class="form-hint">Typisk skattetrekk er 20-35% avhengig av inntekt</div>
      </div>

      <div class="form-group">
        <label class="form-label">Lønningsdag (valgfritt)</label>
        <input type="number" class="form-control" id="payrollDay" placeholder="15" min="1" max="31">
        <div class="form-hint">Hvilken dag i måneden du får utbetalt lønn (1-31)</div>
      </div>
    </div>

    <!-- Step 6: Theme -->
    <div class="onboarding-step" id="step6">
      <div class="step-header">
        <h1 class="step-title">Velg tema</h1>
        <p class="step-subtitle">Tilpass utseendet til dine preferanser</p>
      </div>

      <div class="theme-options">
        <label class="theme-option">
          <input type="radio" name="theme" value="light">
          <div class="theme-preview theme-preview-light">
            <div class="theme-preview-header"></div>
            <div class="theme-preview-content"></div>
          </div>
          <span>Lyst</span>
        </label>
        <label class="theme-option">
          <input type="radio" name="theme" value="dark">
          <div class="theme-preview theme-preview-dark">
            <div class="theme-preview-header"></div>
            <div class="theme-preview-content"></div>
          </div>
          <span>Mørkt</span>
        </label>
        <label class="theme-option">
          <input type="radio" name="theme" value="system" checked>
          <div class="theme-preview theme-preview-system">
            <div class="theme-preview-header"></div>
            <div class="theme-preview-content"></div>
          </div>
          <span>System</span>
        </label>
      </div>
    </div>

    <!-- Step 7: Done -->
    <div class="onboarding-step" id="step7">
      <div class="step-header">
        <div class="completion-icon">
          <svg width="50" height="50" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="20 6 9 17 4 12"></polyline>
          </svg>
        </div>
        <h1 class="step-title">Alt klart!</h1>
        <p class="step-subtitle">Lønnsberegeneren din er nå konfigurert og klar til bruk. Velkommen ombord!</p>
      </div>

      <div class="info-box">
        <div class="info-content">
          <strong>Hva skjer nå?</strong><br>
          Du blir sendt til dashbordet hvor du kan begynne å registrere vakter og følge med på inntektene dine.
        </div>
      </div>
    </div>

    <!-- Navigation -->
    <div class="onboarding-nav">
      <button type="button" class="btn btn-secondary" id="backBtn">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
        Tilbake
      </button>

      <a href="#" class="skip-link" id="skipLink">Hopp over</a>

      <button type="button" class="btn btn-primary" id="nextBtn">
        Neste
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 6 15 12 9 18"></polyline>
        </svg>
      </button>
    </div>
  </div>

  <!-- Moved inline module to external file for CSP safety -->
  <script type="module" src="/kalkulator/js/onboarding.js"></script>
</body>
</html>
    const totalSteps = 7;
    let onboardingData = {};
    let user = null;

    // Initialize onboarding
    async function initOnboarding() {
      // Check if user is authenticated
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        window.location.href = '/kalkulator/login.html';
        return;
      }
      
      user = session.user;
      
      // Check if user has already finished onboarding (skip if being forced to re-onboard)
      if (user.user_metadata?.finishedOnboarding) {
        window.location.href = '/kalkulator/index.html';
        return;
      }

      // Load existing user settings to pre-fill form
      await loadExistingSettings();

      updateProgress();
      updateNavigationButtons();
    }

    // Load existing settings from user_settings table and pre-fill the form
    async function loadExistingSettings() {
      try {
        const { data: settings, error } = await supabase
          .from('user_settings')
          .select('*')
          .eq('user_id', user.id)
          .maybeSingle();

        if (error && error.code !== 'PGRST116') {
          console.error('Error loading existing settings:', error);
          return;
        }

        // Pre-fill Step 1: Name and profile picture
        if (user.user_metadata?.first_name) {
          document.getElementById('firstName').value = user.user_metadata.first_name;
        }
        
        if (settings?.profile_picture_url || user.user_metadata?.avatar_url) {
          setProfilePicture(settings?.profile_picture_url || user.user_metadata.avatar_url);
        }

        // Pre-fill Step 2: Wage settings
        if (settings?.use_preset !== undefined) {
          if (settings.use_preset) {
            // Select Virke option and set wage level
            selectWageType('virke');
            if (settings.current_wage_level) {
              document.getElementById('wageSelect').value = settings.current_wage_level;
            }
          } else {
            // Select custom option and set wage + bonuses
            selectWageType('custom');
            if (settings.custom_wage) {
              document.getElementById('customWageInput').value = settings.custom_wage;
            }
            
            // Pre-fill custom bonuses
            if (settings.custom_bonuses) {
              prefillCustomBonuses(settings.custom_bonuses);
            }
          }
        }

        // Pre-fill Step 3: Break settings
        if (settings?.pause_deduction_method === 'none') {
          document.getElementById('paidBreakToggle').checked = true;
          togglePaidBreak();
        } else {
          document.getElementById('paidBreakToggle').checked = false;
          if (settings?.pause_threshold_hours) {
            document.getElementById('pauseThreshold').value = settings.pause_threshold_hours;
          }
          if (settings?.pause_deduction_minutes) {
            document.getElementById('pauseDuration').value = settings.pause_deduction_minutes;
          }
        }

        // Pre-fill Step 4: Monthly goal
        if (settings?.monthly_goal) {
          document.getElementById('monthlyGoal').value = settings.monthly_goal;
        }

        // Pre-fill Step 5: Tax and payday settings
        if (settings?.tax_deduction_enabled) {
          document.getElementById('taxDeductionToggle').checked = true;
          toggleTaxDeduction();
          if (settings.tax_percentage) {
            document.getElementById('taxPercentage').value = settings.tax_percentage;
          }
        }
        if (settings?.payroll_day) {
          document.getElementById('payrollDay').value = settings.payroll_day;
        }

        // Pre-fill Step 6: Theme
        if (settings?.theme) {
          const themeRadio = document.querySelector(`input[name="theme"][value="${settings.theme}"]`);
          if (themeRadio) {
            themeRadio.checked = true;
            previewTheme(settings.theme);
          }
        }

      } catch (error) {
        console.error('Error loading existing settings:', error);
      }
    }

    // Pre-fill custom bonuses
    function prefillCustomBonuses(customBonuses) {
      if (!customBonuses || typeof customBonuses !== 'object') return;

      ['weekday', 'saturday', 'sunday'].forEach(type => {
        const bonuses = customBonuses[type];
        if (Array.isArray(bonuses) && bonuses.length > 0) {
          bonuses.forEach(bonus => {
            if (bonus.from && bonus.to && bonus.rate) {
              // Add a bonus slot
              addBonusSlot(type);
              
              // Get the last added slot and fill it with data
              const container = document.getElementById(`${type}BonusSlots`);
              const lastSlot = container.lastElementChild;
              if (lastSlot) {
                const inputs = lastSlot.querySelectorAll('input');
                if (inputs.length >= 3) {
                  inputs[0].value = bonus.from; // time from
                  inputs[1].value = bonus.to;   // time to
                  inputs[2].value = bonus.rate; // rate
                }
              }
            }
          });
        }
      });
    }

    function updateProgress() {
      const progressPercent = (currentStep / totalSteps) * 100;
      document.getElementById('progressFill').style.width = progressPercent + '%';
    }

    function updateNavigationButtons() {
      const backBtn = document.getElementById('backBtn');
      const nextBtn = document.getElementById('nextBtn');
      const skipLink = document.getElementById('skipLink');

      backBtn.style.display = currentStep === 1 ? 'none' : 'flex';
      
      if (currentStep === totalSteps) {
        nextBtn.textContent = 'Gå til dashboard';
        nextBtn.innerHTML = 'Gå til dashboard <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 6 15 12 9 18"></polyline></svg>';
        skipLink.style.display = 'none';
      } else {
        nextBtn.innerHTML = 'Neste <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 6 15 12 9 18"></polyline></svg>';
        skipLink.style.display = currentStep === 4 || currentStep === 5 ? 'inline' : 'none'; // Show skip on optional steps
      }
    }

    window.nextStep = async function() {
      // Validate and save current step data
      if (!validateCurrentStep()) {
        return;
      }
      
      await saveCurrentStepData();
      
      if (currentStep === totalSteps) {
        await completeOnboarding();
        return;
      }
      
      // Animate transition
      const currentStepEl = document.getElementById(`step${currentStep}`);
      currentStepEl.classList.add('slide-out-left');
      
      setTimeout(() => {
        currentStepEl.classList.remove('active', 'slide-out-left');
        currentStep++;
        const nextStepEl = document.getElementById(`step${currentStep}`);
        nextStepEl.classList.add('active');
        updateProgress();
        updateNavigationButtons();
      }, 300);
    };

    window.previousStep = function() {
      if (currentStep === 1) return;
      
      const currentStepEl = document.getElementById(`step${currentStep}`);
      currentStepEl.classList.add('slide-out-right');
      
      setTimeout(() => {
        currentStepEl.classList.remove('active', 'slide-out-right');
        currentStep--;
        const prevStepEl = document.getElementById(`step${currentStep}`);
        prevStepEl.classList.add('active');
        updateProgress();
        updateNavigationButtons();
      }, 300);
    };

          user_id: user.id,
          use_preset: onboardingData.use_preset !== undefined ? onboardingData.use_preset : true,
          custom_wage: onboardingData.custom_wage,
          current_wage_level: onboardingData.current_wage_level,
          pause_deduction_method: onboardingData.pause_deduction_method || 'proportional',
          pause_threshold_hours: onboardingData.pause_threshold_hours || 5.5,
          pause_deduction_minutes: onboardingData.pause_deduction_minutes || 30,
          monthly_goal: onboardingData.monthly_goal,
          theme: onboardingData.theme || 'system',
          tax_deduction_enabled: onboardingData.tax_deduction_enabled || false,
          tax_percentage: onboardingData.tax_percentage,
          payroll_day: onboardingData.payroll_day,
          profile_picture_url: onboardingData.profile_picture_url,
          custom_bonuses: onboardingData.custom_bonuses || { weekday: [], saturday: [], sunday: [] }
        };

        // Remove null/undefined/empty string values to avoid database errors
        Object.keys(settingsData).forEach(key => {
          if (settingsData[key] === null || settingsData[key] === undefined || settingsData[key] === '') {
            delete settingsData[key];
          }
        });
        
        // Ensure numeric fields are properly handled
        if (settingsData.monthly_goal === undefined || settingsData.monthly_goal === '') {
          settingsData.monthly_goal = null;
        }
        if (settingsData.payroll_day === undefined || settingsData.payroll_day === '') {
          settingsData.payroll_day = null;
        }
        // HOTFIX: never store base64 data URLs in DB (can blow index size in prod)
        if (typeof settingsData.profile_picture_url === 'string' &&
            settingsData.profile_picture_url.startsWith('data:')) {
          console.warn('[onboarding] stripping inline profile picture data URL before save');
          delete settingsData.profile_picture_url;
        }

        // Save settings to user_settings table
        const { error: settingsError } = await supabase
          .from('user_settings')
          .upsert(settingsData, { onConflict: 'user_id' });

        if (settingsError) {
          console.error('Error saving settings:', settingsError);
          throw settingsError;
        }

        // Update user metadata with name and onboarding completion
        const metadataUpdate = {
          finishedOnboarding: true
        };

        // Only add first_name if it was provided
        if (onboardingData.first_name) {
          metadataUpdate.first_name = onboardingData.first_name;
        }

        const { error: metadataError } = await supabase.auth.updateUser({
          data: metadataUpdate
        });

        if (metadataError) {
          console.error('Error updating user metadata:', metadataError);
          throw metadataError;
        }

        // Redirect to dashboard
        window.location.href = '/kalkulator/index.html';

      } catch (error) {
        console.error('Error completing onboarding:', error);
        alert('Det oppstod en feil ved lagring av innstillingene. Prøv igjen.');
      }
    }

    // Wage type selection
    window.selectWageType = function(type) {
      document.querySelectorAll('.wage-option').forEach(el => el.classList.remove('selected'));
      document.querySelector(`[data-value="${type}"]`).classList.add('selected');
      
      const virkeSection = document.getElementById('virkeWageSection');
      const customSection = document.getElementById('customWageSection');
      
      if (type === 'virke') {
        virkeSection.classList.remove('hidden');
        customSection.classList.add('hidden');
      } else {
        virkeSection.classList.add('hidden');
        customSection.classList.remove('hidden');
      }
    };

    // Profile picture handling with Supabase Storage upload
    document.getElementById('profilePicture').addEventListener('change', async function(e) {
      const file = e.target.files[0];
      if (file) {
        // Show preview instantly with FileReader
        const reader = new FileReader();
        reader.onload = function(e) {
          setProfilePreview(e.target.result);
        };
        reader.readAsDataURL(file);
        
        // Upload to Supabase Storage for actual storage
        try {
          const publicUrl = await uploadProfilePictureToStorage(file);
          if (publicUrl) {
            onboardingData.profile_picture_url = publicUrl;
          }
        } catch (error) {
          console.error('Failed to upload profile picture:', error);
          // Keep the preview but don't save the URL
        }
      }
    });

    function setProfilePreview(url) {
      const preview = document.getElementById('profilePreview');
      const placeholder = document.getElementById('profilePlaceholder');
      
      preview.innerHTML = `<img src="${url}" alt="Profilbilde">`;
    }
    
    function setProfilePicture(url) {
      setProfilePreview(url);
      onboardingData.profile_picture_url = url;
    }
    
    // Upload profile picture to Supabase Storage
    async function uploadProfilePictureToStorage(file) {
      try {
        if (!user?.id) throw new Error('No user ID available');
        
        // Create a unique filename
        const fileExt = file.name.split('.').pop();
        const fileName = `${user.id}/onboarding_${Date.now()}.${fileExt}`;
        
        // Upload to the same bucket used by settings modal
        const { error: uploadError } = await supabase.storage
          .from('profile-pictures')
          .upload(fileName, file, {
            contentType: file.type,
            upsert: true
          });
        
        if (uploadError) {
          throw uploadError;
        }
        
        // Get the public URL
        const { data: publicData } = supabase.storage
          .from('profile-pictures')
          .getPublicUrl(fileName);
        
        if (publicData?.publicUrl) {
          return publicData.publicUrl;
        } else {
          throw new Error('Failed to get public URL');
        }
      } catch (error) {
        console.error('Error uploading profile picture:', error);
        throw error;
      }
    }

    // Break settings
    window.togglePaidBreak = function() {
      const isChecked = document.getElementById('paidBreakToggle').checked;
      const advancedSection = document.getElementById('breakAdvancedSection');
      advancedSection.style.display = isChecked ? 'none' : 'block';
    };

    window.toggleAdvancedBreaks = function() {
      const content = document.getElementById('breakAdvancedContent');
      const toggle = document.querySelector('.advanced-toggle svg');
      
      if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        content.classList.add('fade-in');
        toggle.style.transform = 'rotate(90deg)';
      } else {
        content.classList.add('hidden');
        content.classList.remove('fade-in');
        toggle.style.transform = 'rotate(0deg)';
      }
    };

    // Tax settings
    window.toggleTaxDeduction = function() {
      const isChecked = document.getElementById('taxDeductionToggle').checked;
      const taxSection = document.getElementById('taxPercentageSection');
      
      if (isChecked) {
        taxSection.classList.remove('hidden');
        taxSection.classList.add('fade-in');
      } else {
        taxSection.classList.add('hidden');
        taxSection.classList.remove('fade-in');
      }
    };

    // Theme preview
    window.previewTheme = function(theme) {
      // Apply theme immediately for live preview
      if (theme === 'system') {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        document.documentElement.className = prefersDark ? 'theme-dark' : 'theme-light';
      } else {
        document.documentElement.className = `theme-${theme}`;
      }
    };

    // Bonus slots management for custom wages
    window.addBonusSlot = function(type) {
      const container = document.getElementById(`${type}BonusSlots`);
      
      // Check if we already have 10 slots for this type - silently return if so
      const existingSlots = container.querySelectorAll('.bonus-slot');
      if (existingSlots.length >= 10) {
        return;
      }
      
      // Set appropriate defaults based on type
      let defaultFrom, defaultTo, defaultAmount, placeholder;
      switch (type) {
        case 'weekday':
          defaultFrom = '18:00';
          defaultTo = '22:00';
          placeholder = '25.00';
          defaultAmount = 25;
          break;
        case 'saturday':
          defaultFrom = '00:00';
          defaultTo = '23:59';
          placeholder = '50.00';
          defaultAmount = 50;
          break;
        case 'sunday':
          defaultFrom = '00:00';
          defaultTo = '23:59';
          placeholder = '100.00';
          defaultAmount = 100;
          break;
      }
      
      const slotHtml = `
        <div class="bonus-slot">
          <div class="bonus-slot-field">
            <label class="bonus-slot-label">Fra tid</label>
            <input type="time" value="${defaultFrom}" required>
          </div>
          <div class="bonus-slot-field">
            <label class="bonus-slot-label">Til tid</label>
            <input type="time" value="${defaultTo}" required>
          </div>
          <div class="bonus-slot-field">
            <label class="bonus-slot-label">Tillegg (kr/t)</label>
            <input type="number" placeholder="${placeholder}" value="${defaultAmount}" step="0.01" min="0" max="500" required>
          </div>
          <button type="button" class="remove-bonus-btn" title="Fjern tillegg">
            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      `;
      container.insertAdjacentHTML('beforeend', slotHtml);
    };

    function collectCustomBonuses() {
      const bonuses = {
        weekday: [],
        saturday: [],
        sunday: []
      };
      
      ['weekday', 'saturday', 'sunday'].forEach(type => {
        const slots = document.querySelectorAll(`#${type}BonusSlots .bonus-slot`);
        slots.forEach(slot => {
          const inputs = slot.querySelectorAll('input');
          const from = inputs[0].value;
          const to = inputs[1].value;
          const rate = parseFloat(inputs[2].value);
          
          if (from && to && rate) {
            bonuses[type].push({ from, to, rate });
          }
        });
      });
      
      return bonuses;
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', initOnboarding);
  
</body>
</html>
