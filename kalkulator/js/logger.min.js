class Logger{constructor(){this.isDevelopment=this.detectEnvironment();this.startTime=performance.now();this.marks=new Map();this.levels={ERROR: 0,WARN: 1,INFO: 2,DEBUG: 3};this.logLevel=this.isDevelopment ? this.levels.DEBUG : this.levels.WARN;}detectEnvironment(){const hostname=window.location.hostname;const isDev=hostname==='localhost'||hostname==='127.0.0.1'||hostname.includes('dev')||window.location.search.includes('debug=true');return isDev;}setLevel(level){if(this.levels[level]!==undefined){this.logLevel=this.levels[level];}}shouldLog(level){return level<=this.logLevel;}error(message,...args){if(this.shouldLog(this.levels.ERROR)){console.error(`[ERROR] ${message}`,...args);}}warn(message,...args){if(this.shouldLog(this.levels.WARN)){console.warn(`[WARN] ${message}`,...args);}}info(message,...args){if(this.shouldLog(this.levels.INFO)){console.info(`[INFO] ${message}`,...args);}}debug(message,...args){if(this.shouldLog(this.levels.DEBUG)){}}mark(name){if(this.isDevelopment){this.marks.set(name,performance.now());}}measure(name,startMark,endMark){if(!this.isDevelopment)return;const startTime=this.marks.get(startMark);const endTime=endMark ? this.marks.get(endMark): performance.now();if(startTime!==undefined&&endTime!==undefined){const duration=endTime-startTime;this.debug(`Performance: ${name}took ${duration.toFixed(2)}ms`);return duration;}this.warn(`Performance: Missing mark for ${name}`);return null;}time(name,fn){if(!this.isDevelopment){return fn();}const startTime=performance.now();const result=fn();const endTime=performance.now();this.debug(`Timer: ${name}took ${(endTime-startTime).toFixed(2)}ms`);return result;}domPerf(operation,elementCount,duration){if(this.isDevelopment){this.debug(`DOM: ${operation}processed ${elementCount}elements in ${duration.toFixed(2)}ms`);}}memory(){if(this.isDevelopment&&performance.memory){const memory=performance.memory;this.debug(`Memory: Used ${(memory.usedJSHeapSize/1024/1024).toFixed(2)}MB/${(memory.totalJSHeapSize/1024/1024).toFixed(2)}MB`);}}group(name,fn){if(this.isDevelopment){console.group(name);fn();console.groupEnd();}else{fn();}}if(condition,message,...args){if(condition&&this.isDevelopment){this.debug(message,...args);}}setEnabled(enabled){this.logLevel=enabled ? this.levels.DEBUG :-1;}getCurrentLevel(){const levelNames=Object.keys(this.levels);return levelNames.find(name=>this.levels[name]===this.logLevel)||'UNKNOWN';}}window.logger=new Logger();window.log={error:(...args)=>window.logger.error(...args),warn:(...args)=>window.logger.warn(...args),info:(...args)=>window.logger.info(...args),debug:(...args)=>window.logger.debug(...args),mark:(name)=>window.logger.mark(name),measure:(...args)=>window.logger.measure(...args),time:(...args)=>window.logger.time(...args),memory:()=>window.logger.memory(),group:(...args)=>window.logger.group(...args),if:(...args)=>window.logger.if(...args)};if(typeof module!=='undefined'&&module.exports){module.exports=Logger;}