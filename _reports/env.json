[
  {
    "name": "SUPABASE_URL",
    "scope": "server",
    "required": true,
    "default": null,
    "usedBy": [
      "server/server.js:200",
      "server/test-secure-billing.js:23"
    ],
    "description": "Supabase project base URL used to instantiate the service-role admin client.",
    "risks": "Missing or incorrect value disables database access; must match the Supabase project origin enforced by RLS."
  },
  {
    "name": "SUPABASE_SERVICE_ROLE_KEY",
    "scope": "server",
    "required": true,
    "default": null,
    "usedBy": [
      "server/server.js:201"
    ],
    "description": "Service role key granting privileged Supabase access for server-side CRUD and RLS bypass where needed.",
    "risks": "High-privilege secret; exposure allows full database access. Rotate immediately if leaked."
  },
  {
    "name": "SUPABASE_JWKS_URL",
    "scope": "server",
    "required": false,
    "default": "https://id.kkarlsen.dev/auth/v1/.well-known/jwks.json",
    "usedBy": [
      "server/lib/auth/verifySupabaseJwt.js:4"
    ],
    "description": "Location of the JWKS used to validate Supabase-issued JWT access tokens.",
    "risks": "If pointed at an attacker-controlled JWKS, auth could be bypassed. Ensure HTTPS and trusted host."
  },
  {
    "name": "STRIPE_SECRET_KEY",
    "scope": "server",
    "required": true,
    "default": null,
    "usedBy": [
      "server/server.js:14",
      "server/server.js:480",
      "server/tests/auth.test.js:167"
    ],
    "description": "Stripe API key used for billing flows, webhooks, and customer management.",
    "risks": "Core payment secret; leakage allows fraudulent billing actions. Separate test vs prod keys per environment."
  },
  {
    "name": "STRIPE_WEBHOOK_SECRET",
    "scope": "server",
    "required": true,
    "default": null,
    "usedBy": [
      "server/server.js:1446"
    ],
    "description": "Signature secret for validating incoming Stripe webhook events.",
    "risks": "If unset or wrong, webhook events are rejected; if leaked, attackers can forge billing events."
  },
  {
    "name": "PUBLIC_APP_BASE_URL",
    "scope": "server",
    "required": false,
    "default": "https://kalkulator.kkarlsen.dev",
    "usedBy": [
      "server/server.js:36",
      "server/tests/auth.test.js:19"
    ],
    "description": "Public URL of the SPA used for Stripe redirect success/cancel pages and tests.",
    "risks": "Incorrect value causes broken redirects after checkout/portal actions."
  },
  {
    "name": "JSON_BODY_LIMIT",
    "scope": "server",
    "required": false,
    "default": "1mb",
    "usedBy": [
      "server/server.js:114"
    ],
    "description": "Override for Express JSON body parser limit.",
    "risks": "Too low blocks legitimate payloads; too high increases memory DoS surface."
  },
  {
    "name": "AGENT_BLOCK_READS",
    "scope": "server",
    "required": false,
    "default": "false",
    "usedBy": [
      "server/server.js:236"
    ],
    "description": "When true, AI-marked users are blocked from read routes in addition to writes.",
    "risks": "Misconfiguration could prevent legitimate AI-assisted tooling; leaving false preserves read access."
  },
  {
    "name": "AUDIT_PAYLOAD_MAX_CHARS",
    "scope": "server",
    "required": false,
    "default": "2000",
    "usedBy": [
      "server/server.js:281"
    ],
    "description": "Maximum serialized payload length stored in audit entries.",
    "risks": "Large values may bloat audit logs; low values may truncate useful forensic data."
  },
  {
    "name": "STRIPE_PORTAL_CONFIG_ID",
    "scope": "server",
    "required": false,
    "default": null,
    "usedBy": [
      "server/server.js:1248",
      "server/server.js:1336"
    ],
    "description": "Optional Stripe Billing Portal configuration ID injected when creating sessions.",
    "risks": "If pointing to a removed config, portal sessions fail; keep per-environment IDs in sync."
  },
  {
    "name": "DEV_BYPASS",
    "scope": "server",
    "required": false,
    "default": null,
    "usedBy": [
      "server/server.js:1655"
    ],
    "description": "Enables admin-style diagnostics (like /admin/unlinked-customers) without full role checks in development.",
    "risks": "Should never be true in production; bypasses admin role enforcement on certain paths."
  },
  {
    "name": "PORT",
    "scope": "server",
    "required": false,
    "default": "10000",
    "usedBy": [
      "server/server.js:4316",
      "server/tests/auth.test.js:18"
    ],
    "description": "Network port for the Express server; also consumed by tests to build URLs.",
    "risks": "Conflicts prevent startup; ensure alignment with reverse proxies."
  },
  {
    "name": "GRACEFUL_SHUTDOWN_MS",
    "scope": "server",
    "required": false,
    "default": "25000",
    "usedBy": [
      "server/server.js:4323"
    ],
    "description": "Milliseconds to wait for active connections during graceful shutdown.",
    "risks": "Too low risks dropped requests; too high delays restarts."
  },
  {
    "name": "NODE_ENV",
    "scope": "server",
    "required": false,
    "default": "development",
    "usedBy": [
      "server/server.js:45",
      "server/server.js:174",
      "server/tests/auth.test.js:174"
    ],
    "description": "Standard Node environment flag toggling logging format, dev-only routes, and Stripe key assertions.",
    "risks": "Incorrect value can disable diagnostics or enforce production-only checks in dev."
  },
  {
    "name": "VITE_SUPABASE_URL",
    "scope": "client",
    "required": false,
    "default": null,
    "usedBy": [
      "app/src/runtime-config.js:5",
      "app/src/supabase-client.js:9"
    ],
    "description": "Supabase URL injected into SPA builds for the browser client.",
    "risks": "If unset, falls back to production default host; mismatch breaks auth in non-prod environments."
  },
  {
    "name": "VITE_SUPABASE_PUBLISHABLE_KEY",
    "scope": "client",
    "required": false,
    "default": null,
    "usedBy": [
      "app/src/runtime-config.js:6",
      "app/src/supabase-client.js:10"
    ],
    "description": "Supabase anon/public key exposed to browser clients for auth and data access.",
    "risks": "Should always use anon key; avoid leaking service-role credentials."
  },
  {
    "name": "VITE_API_BASE",
    "scope": "client",
    "required": false,
    "default": null,
    "usedBy": [
      "app/src/runtime-config.js:7",
      "app/src/lib/net/apiBase.js:4",
      "marketing/src/js/apiBase.js:4"
    ],
    "description": "Optional override for API origin used by SPA and marketing site to contact the Express server.",
    "risks": "Pointing to wrong origin breaks API calls; ensure HTTPS in production."
  },
  {
    "name": "VITE_API_STREAM_BASE",
    "scope": "client",
    "required": false,
    "default": null,
    "usedBy": [
      "app/src/runtime-config.js:8"
    ],
    "description": "Optional dedicated origin for streaming/SSE endpoints.",
    "risks": "Unused today; misconfiguration is low risk but should mirror API base when introduced."
  },
  {
    "name": "VITE_ENABLE_CUSTOM_BONUS_EDITOR",
    "scope": "client",
    "required": false,
    "default": "true",
    "usedBy": [
      "app/src/flags.js:20"
    ],
    "description": "Feature toggle for enabling the custom bonus editor UI.",
    "risks": "Set to false to hide UI; ensure server still guards related endpoints."
  },
  {
    "name": "VITE_APP_URL",
    "scope": "client",
    "required": false,
    "default": null,
    "usedBy": [
      "app/src/lib/redirect.js:4"
    ],
    "description": "Explicit SPA URL used by marketing CTAs when linking to the main application.",
    "risks": "Incorrect value sends users to the wrong domain or port."
  }
]
