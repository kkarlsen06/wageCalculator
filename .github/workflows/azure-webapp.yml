name: Deploy to Azure Web App

on:
  push:
    branches: [ "main" ]
    paths:
      - "server/**"
  workflow_dispatch: {}

concurrency:
  group: wageapp-prod-webapp
  cancel-in-progress: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: "server/package-lock.json"

      - name: Install backend deps
        working-directory: ./server
        run: npm ci --no-fund --no-audit

      - name: Security scan - Check for leaked secrets in client code
        run: |
          if rg -n "(SUPABASE_SERVICE_ROLE_KEY|SUPABASE_ANON_KEY)" src/ kalkulator/ 2>/dev/null; then
            echo "❌ Sensitive key pattern detected in client code"
            echo "🔒 Service role keys must never be exposed to the browser"
            exit 1
          else
            echo "✅ No sensitive keys found in client code"
          fi

      - name: Smoke build (no-op for server)
        working-directory: ./server
        run: node -e "require('fs').accessSync('server.js')"

      - name: Azure Login (service principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Detect staging slot
        id: detect_slot
        uses: azure/CLI@v2
        with:
          inlineScript: |
            if az webapp deployment slot show -g rg-wageapp -n wageapp-prod -s staging >/dev/null 2>&1; then
              echo "has_staging=true" >> $GITHUB_OUTPUT
            else
              echo "has_staging=false" >> $GITHUB_OUTPUT
            fi

      - name: Deploy to Azure Web App (staging, attempt 1)
        id: deploy1
        if: steps.detect_slot.outputs.has_staging == 'true'
        continue-on-error: true
        uses: azure/webapps-deploy@v3
        with:
          app-name: wageapp-prod
          slot-name: staging
          package: ./server

      - name: Wait before retry (attempt 2)
        if: steps.detect_slot.outputs.has_staging == 'true' && steps.deploy1.outcome == 'failure'
        run: |
          echo "First deploy attempt failed. Waiting 45s before retry..."
          sleep 45

      - name: Deploy to Azure Web App (staging, attempt 2)
        id: deploy2
        if: steps.detect_slot.outputs.has_staging == 'true' && steps.deploy1.outcome == 'failure'
        continue-on-error: true
        uses: azure/webapps-deploy@v3
        with:
          app-name: wageapp-prod
          slot-name: staging
          package: ./server

      - name: Wait before final retry (attempt 3)
        if: steps.detect_slot.outputs.has_staging == 'true' && steps.deploy2.outcome == 'failure'
        run: |
          echo "Second deploy attempt failed. Waiting 90s before final retry..."
          sleep 90

      - name: Deploy to Azure Web App (staging, attempt 3)
        id: deploy3
        if: steps.detect_slot.outputs.has_staging == 'true' && steps.deploy2.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: wageapp-prod
          slot-name: staging
          package: ./server

      - name: Warm up staging slot
        if: steps.detect_slot.outputs.has_staging == 'true' && (steps.deploy1.outcome == 'success' || steps.deploy2.outcome == 'success' || steps.deploy3.outcome == 'success')
        run: |
          set -e
          echo "Warming up staging slot via /config health endpoint..."
          for i in {1..24}; do
            echo "Attempt $i: checking /config..."
            if curl -fsS https://wageapp-prod-staging.azurewebsites.net/config | jq -e '.features != null' >/dev/null 2>&1; then
              echo "Health check passed."; break
            fi
            sleep 5
          done
          # Final assert
          curl -fsS https://wageapp-prod-staging.azurewebsites.net/config | jq -e '.features != null' >/dev/null

      - name: Swap staging -> production
        if: steps.detect_slot.outputs.has_staging == 'true' && (steps.deploy1.outcome == 'success' || steps.deploy2.outcome == 'success' || steps.deploy3.outcome == 'success')
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Swapping staging to production..."
            az webapp deployment slot swap -g rg-wageapp -n wageapp-prod --slot staging --target-slot production

      # Fallback: direct deploy to production when slots are unavailable
      - name: Deploy to Azure Web App (prod, attempt 1)
        id: pdeploy1
        if: steps.detect_slot.outputs.has_staging == 'false'
        continue-on-error: true
        uses: azure/webapps-deploy@v3
        with:
          app-name: wageapp-prod
          package: ./server

      - name: Wait before retry (prod attempt 2)
        if: steps.detect_slot.outputs.has_staging == 'false' && steps.pdeploy1.outcome == 'failure'
        run: |
          echo "First prod deploy attempt failed. Waiting 45s before retry..."
          sleep 45

      - name: Deploy to Azure Web App (prod, attempt 2)
        id: pdeploy2
        if: steps.detect_slot.outputs.has_staging == 'false' && steps.pdeploy1.outcome == 'failure'
        continue-on-error: true
        uses: azure/webapps-deploy@v3
        with:
          app-name: wageapp-prod
          package: ./server

      - name: Wait before final retry (prod attempt 3)
        if: steps.detect_slot.outputs.has_staging == 'false' && steps.pdeploy2.outcome == 'failure'
        run: |
          echo "Second prod deploy attempt failed. Waiting 90s before final retry..."
          sleep 90

      - name: Deploy to Azure Web App (prod, attempt 3)
        id: pdeploy3
        if: steps.detect_slot.outputs.has_staging == 'false' && steps.pdeploy2.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: wageapp-prod
          package: ./server

      - name: Verify production health
        if: (steps.detect_slot.outputs.has_staging == 'true' && (steps.deploy1.outcome == 'success' || steps.deploy2.outcome == 'success' || steps.deploy3.outcome == 'success')) ||
            (steps.detect_slot.outputs.has_staging == 'false' && (steps.pdeploy1.outcome == 'success' || steps.pdeploy2.outcome == 'success' || steps.pdeploy3.outcome == 'success'))
        run: |
          echo "Verifying production /config..."
          curl -fsS https://wageapp-prod.azurewebsites.net/config | jq -e '.features != null'
